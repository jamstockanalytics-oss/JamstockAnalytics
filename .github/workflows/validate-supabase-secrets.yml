name: Validate Supabase Secrets

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    env:
      # Inject secrets from GitHub Secrets (set these in repo Settings → Secrets → Actions)
      SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
      SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
      LOCATION: ${{ secrets.LOCATION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print minimal environment info
        run: |
          echo "Running secrets validation"
          echo "LOCATION is set to: ${LOCATION:-<not-set>}"
          # Do not print sensitive secrets like SUPABASE_PASSWORD or SUPABASE_HOST

      - name: Fail if required secrets missing
        run: |
          missing=false
          if [ -z "${SUPABASE_HOST}" ]; then
            echo "ERROR: SUPABASE_HOST is not set"
            missing=true
          fi
          if [ -z "${SUPABASE_PASSWORD}" ]; then
            echo "ERROR: SUPABASE_PASSWORD is not set"
            missing=true
          fi
          if [ -z "${LOCATION}" ]; then
            echo "ERROR: LOCATION is not set"
            missing=true
          fi
          if [ "$missing" = true ]; then
            echo "One or more required secrets are missing. Exiting."
            exit 1
          fi
          echo "All required secrets appear to be set."

      - name: Install Node (for validate script) (optional)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies (optional)
        if: file-exists('package.json')
        run: |
          npm ci

      - name: Run validate-secrets script
        # Replace the command below with your actual validation script.
        # Example scripts:
        # - node ./scripts/validate-secrets.js
        # - ./scripts/validate-secrets.sh
        run: |
          echo "Running validate-secrets..."
          # Example: a Node script that checks format or tries a test connection.
          # If you don't have a script, this simple check demonstrates usage:
          if [ -n "${SUPABASE_HOST}" ] && [ -n "${SUPABASE_PASSWORD}" ]; then
            # Minimal non-sensitive checks (no network calls).
            if [[ ! "${SUPABASE_HOST}" =~ ^https?:// ]]; then
              echo "WARNING: SUPABASE_HOST does not start with http:// or https://"
              # Not failing; only a warning. Uncomment next line to fail instead.
              # exit 1
            fi
            echo "Secrets validated locally (format checks passed)."
          else
            echo "Secrets missing at runtime (unexpected)."
            exit 1
          fi

      - name: (Optional) Attempt test connection
        if: env.SUPABASE_HOST != '' && env.SUPABASE_PASSWORD != ''
        run: |
          # Example: use curl to hit a health endpoint if your Supabase project exposes one.
          # WARNING: Do not echo secrets. This example assumes a non-auth health endpoint.
          HEALTH_URL="${SUPABASE_HOST}/health"
          echo "Attempting to reach ${HEALTH_URL} (this may 404 if no endpoint exists)..."
          curl -fsS "${HEALTH_URL}" || echo "Health endpoint not reachable or not provided; that's okay for this check."
