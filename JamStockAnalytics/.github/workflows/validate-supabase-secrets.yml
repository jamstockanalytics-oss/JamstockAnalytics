name: Validate Supabase Secrets

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    env:
      # Inject secrets from GitHub Secrets (set these in repo Settings ‚Üí Secrets ‚Üí Actions)
      SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
      SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
      LOCATION: ${{ secrets.LOCATION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print minimal environment info
        run: |
          echo "Running secrets validation"
          echo "LOCATION is set to: ${LOCATION:-<not-set>}"
          # Do not print sensitive secrets like SUPABASE_PASSWORD or SUPABASE_HOST

      - name: Fail if required secrets missing
        run: |
          missing=false
          if [ -z "${SUPABASE_HOST}" ]; then
            echo "ERROR: SUPABASE_HOST is not set"
            missing=true
          fi
          if [ -z "${SUPABASE_PASSWORD}" ]; then
            echo "ERROR: SUPABASE_PASSWORD is not set"
            missing=true
          fi
          if [ -z "${LOCATION}" ]; then
            echo "ERROR: LOCATION is not set"
            missing=true
          fi
          if [ "$missing" = true ]; then
            echo "One or more required secrets are missing. Exiting."
            exit 1
          fi
          echo "All required secrets appear to be set."

      - name: Install jq
        run: |
          echo "Installing jq for JSON processing..."
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate GCP service account key (install jq)
        run: |
          echo "üîç Installing jq for validation..."
          sudo apt-get update -y
          sudo apt-get install -y jq

          echo "üîç Testing GCP secret availability..."
          if [[ -n "${GCP_SA_KEY:-}" ]] && echo "${GCP_SA_KEY}" | jq -e . >/dev/null 2>&1; then
            echo "‚úÖ GCP_SA_KEY secret is present and valid JSON"
            echo "Secret length: ${#GCP_SA_KEY}"
          else
            echo "‚ùå GCP_SA_KEY missing or invalid JSON"
            echo "üí° Please add a valid GCP service account key to GitHub Secrets"
            exit 1
          fi
        env:
          GCP_PROJECT_ID: jamstockanalytics
          GCP_SERVICE_ACCOUNT: 802624016917-compute@developer.gserviceaccount.com
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Validate GCP service account key (use node)
        run: |
          echo "üîç Testing GCP secret availability (node)..."
          if [[ -n "${GCP_SA_KEY:-}" ]]; then
            if node -e "try{JSON.parse(process.env.GCP_SA_KEY); process.exit(0)}catch(e){process.exit(1)}"; then
              echo "‚úÖ GCP_SA_KEY present and valid JSON (node)"
              echo "Secret length: ${#GCP_SA_KEY}"
            else
              echo "‚ùå GCP_SA_KEY present but invalid JSON"
              exit 1
            fi
          else
            echo "‚ùå GCP_SA_KEY secret is missing"
            exit 1
          fi
        env:
          GCP_PROJECT_ID: jamstockanalytics
          GCP_SERVICE_ACCOUNT: 802624016917-compute@developer.gserviceaccount.com
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Install jq and validate GCP service account key
        run: |
          echo "üîç Installing jq..."
          sudo apt-get update -y
          sudo apt-get install -y jq

          echo "üîç Checking GCP_SA_KEY presence..."
          if [[ -z "${GCP_SA_KEY:-}" ]]; then
            echo "‚ùå GCP_SA_KEY is missing"
            exit 1
          fi

          echo "üîç Validating JSON parse..."
          if ! echo "$GCP_SA_KEY" | jq empty >/dev/null 2>&1; then
            echo "‚ùå GCP_SA_KEY is not valid JSON"
            exit 1
          else
            echo "‚úÖ GCP_SA_KEY is valid JSON"
          fi

          echo "üîç Validating it's a service account key..."
          if echo "$GCP_SA_KEY" | jq -e '.type == "service_account"' >/dev/null 2>&1; then
            echo "‚úÖ GCP_SA_KEY type == service_account"
          else
            echo "‚ùå GCP_SA_KEY JSON does not have type=service_account"
            echo "üîé You can inspect the parsed fields locally (don't print secrets in CI logs)"
            exit 1
          fi
        env:
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

      - name: Install Node (for validate script) (optional)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies (optional)
        if: file-exists('package.json')
        run: |
          npm ci

      - name: Run validate-secrets script (basic)
        run: |
          echo "Running basic validate-secrets..."
          # Make the script executable
          chmod +x ./scripts/validate-secrets.sh
          # Run the basic validation script
          ./scripts/validate-secrets.sh

      - name: Run validate-secrets script (with jq)
        run: |
          echo "Running advanced validate-secrets with jq..."
          # Make the script executable
          chmod +x ./scripts/validate-secrets-with-jq.sh
          # Run the jq-based validation script
          ./scripts/validate-secrets-with-jq.sh

      - name: (Optional) Attempt test connection
        if: env.SUPABASE_HOST != '' && env.SUPABASE_PASSWORD != ''
        run: |
          # Example: use curl to hit a health endpoint if your Supabase project exposes one.
          # WARNING: Do not echo secrets. This example assumes a non-auth health endpoint.
          HEALTH_URL="${SUPABASE_HOST}/health"
          echo "Attempting to reach ${HEALTH_URL} (this may 404 if no endpoint exists)..."
          curl -fsS "${HEALTH_URL}" || echo "Health endpoint not reachable or not provided; that's okay for this check."
