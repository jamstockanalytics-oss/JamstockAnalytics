#!/usr/bin/env node

/**
 * Automated Environment Setup Script
 * This script automatically configures environment variables without user input
 */

const fs = require('fs');
const path = require('path');

// Default configuration values
const DEFAULT_CONFIG = {
  EXPO_PUBLIC_SUPABASE_URL: 'https://your-project.supabase.co',
  EXPO_PUBLIC_SUPABASE_ANON_KEY: 'your-anon-key-here',
  SUPABASE_SERVICE_ROLE_KEY: 'your-service-role-key-here',
  EXPO_PUBLIC_DEEPSEEK_API_KEY: 'your-deepseek-api-key-here',
  DEEPSEEK_API_URL: 'https://api.deepseek.com/v1/chat/completions',
  DEEPSEEK_MODEL: 'deepseek-chat',
  DEEPSEEK_TEMPERATURE: '0.7',
  DEEPSEEK_MAX_TOKENS: '1000',
  CHAT_SESSION_TIMEOUT_HOURS: '24',
  CHAT_MAX_MESSAGES_PER_SESSION: '1000',
  CHAT_CLEANUP_INTERVAL_DAYS: '30'
};

// Alternative authentication methods
const AUTH_ALTERNATIVES = {
  // Service Account Authentication
  SERVICE_ACCOUNT: {
    type: 'service_account',
    description: 'Use service account credentials for automated builds',
    envVars: {
      'SUPABASE_SERVICE_ROLE_KEY': 'Service role key for admin operations',
      'SUPABASE_SERVICE_ACCOUNT_EMAIL': 'Service account email',
      'SUPABASE_SERVICE_ACCOUNT_PASSWORD': 'Service account password'
    }
  },
  
  // API Key Authentication
  API_KEY: {
    type: 'api_key',
    description: 'Use API keys for authentication',
    envVars: {
      'SUPABASE_API_KEY': 'Supabase API key',
      'DEEPSEEK_API_KEY': 'DeepSeek API key'
    }
  },
  
  // JWT Token Authentication
  JWT_TOKEN: {
    type: 'jwt_token',
    description: 'Use JWT tokens for authentication',
    envVars: {
      'SUPABASE_JWT_SECRET': 'JWT secret for token validation',
      'SUPABASE_JWT_ISSUER': 'JWT issuer',
      'SUPABASE_JWT_AUDIENCE': 'JWT audience'
    }
  },
  
  // OAuth2 Client Credentials
  OAUTH2_CLIENT: {
    type: 'oauth2_client',
    description: 'Use OAuth2 client credentials flow',
    envVars: {
      'OAUTH2_CLIENT_ID': 'OAuth2 client ID',
      'OAUTH2_CLIENT_SECRET': 'OAuth2 client secret',
      'OAUTH2_TOKEN_URL': 'OAuth2 token endpoint'
    }
  }
};

function createEnvFile() {
  console.log('üîß Creating automated environment configuration...\n');
  
  const envPath = path.join(__dirname, '..', '.env');
  const envExamplePath = path.join(__dirname, '..', 'env.example');
  
  // Create .env file with default values
  let envContent = '# Automated Environment Configuration\n';
  envContent += '# Generated by auto-setup-env.js\n\n';
  
  Object.entries(DEFAULT_CONFIG).forEach(([key, value]) => {
    envContent += `${key}=${value}\n`;
  });
  
  envContent += '\n# Alternative Authentication Methods\n';
  envContent += '# Uncomment and configure one of the following:\n\n';
  
  // Add alternative authentication methods
  Object.entries(AUTH_ALTERNATIVES).forEach(([name, config]) => {
    envContent += `# ${config.description}\n`;
    envContent += `# AUTH_METHOD=${config.type}\n`;
    Object.entries(config.envVars).forEach(([envVar, description]) => {
      envContent += `# ${envVar}=${description.toLowerCase()}\n`;
    });
    envContent += '\n';
  });
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ Created .env file with default configuration');
  } catch (error) {
    console.error('‚ùå Failed to create .env file:', error.message);
    return false;
  }
  
  // Update env.example with new structure
  try {
    fs.writeFileSync(envExamplePath, envContent);
    console.log('‚úÖ Updated env.example file');
  } catch (error) {
    console.error('‚ùå Failed to update env.example:', error.message);
  }
  
  return true;
}

function createBuildScripts() {
  console.log('üì¶ Creating automated build scripts...\n');
  
  const packageJsonPath = path.join(__dirname, '..', 'package.json');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // Add automated build scripts
    packageJson.scripts = {
      ...packageJson.scripts,
      'build:auto': 'eas build --platform all --profile automated --non-interactive',
      'build:android:auto': 'eas build --platform android --profile automated --non-interactive',
      'build:ios:auto': 'eas build --platform ios --profile automated --non-interactive',
      'build:web:auto': 'npx expo export -p web',
      'deploy:auto': 'npm run build:web:auto && npx eas-cli@latest deploy --non-interactive',
      'setup:auto': 'node scripts/auto-setup-env.js && npm run setup-database && npm run seed-database',
      'build:ci': 'npm run setup:auto && npm run build:auto',
      'test:integration:auto': 'npm run test-database && npm run test-chat-integration'
    };
    
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log('‚úÖ Added automated build scripts to package.json');
  } catch (error) {
    console.error('‚ùå Failed to update package.json:', error.message);
    return false;
  }
  
  return true;
}

function createCIConfig() {
  console.log('üöÄ Creating CI/CD configuration...\n');
  
  // GitHub Actions workflow
  const githubWorkflow = `name: Automated Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup environment
      run: npm run setup:auto
      env:
        EXPO_PUBLIC_SUPABASE_URL: \${{ secrets.SUPABASE_URL }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: \${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: \${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        EXPO_PUBLIC_DEEPSEEK_API_KEY: \${{ secrets.DEEPSEEK_API_KEY }}
    
    - name: Run tests
      run: npm run test:integration:auto
    
    - name: Build for Android
      run: npm run build:android:auto
      env:
        EXPO_PUBLIC_SUPABASE_URL: \${{ secrets.SUPABASE_URL }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: \${{ secrets.SUPABASE_ANON_KEY }}
        EXPO_PUBLIC_DEEPSEEK_API_KEY: \${{ secrets.DEEPSEEK_API_KEY }}
    
    - name: Build for iOS
      run: npm run build:ios:auto
      env:
        EXPO_PUBLIC_SUPABASE_URL: \${{ secrets.SUPABASE_URL }}
        EXPO_PUBLIC_SUPABASE_ANON_KEY: \${{ secrets.SUPABASE_ANON_KEY }}
        EXPO_PUBLIC_DEEPSEEK_API_KEY: \${{ secrets.DEEPSEEK_API_KEY }}
    
    - name: Build for Web
      run: npm run build:web:auto
    
    - name: Deploy to Expo
      run: npm run deploy:auto
      env:
        EXPO_TOKEN: \${{ secrets.EXPO_TOKEN }}
`;

  const workflowPath = path.join(__dirname, '..', '.github', 'workflows', 'build.yml');
  
  try {
    // Create .github/workflows directory if it doesn't exist
    const workflowsDir = path.dirname(workflowPath);
    if (!fs.existsSync(workflowsDir)) {
      fs.mkdirSync(workflowsDir, { recursive: true });
    }
    
    fs.writeFileSync(workflowPath, githubWorkflow);
    console.log('‚úÖ Created GitHub Actions workflow');
  } catch (error) {
    console.error('‚ùå Failed to create GitHub Actions workflow:', error.message);
    return false;
  }
  
  return true;
}

function createAlternativeAuth() {
  console.log('üîê Creating alternative authentication methods...\n');
  
  // Create service account authentication
  const serviceAccountAuth = `// Service Account Authentication
// This method uses service account credentials for automated operations

const { createClient } = require('@supabase/supabase-js');

class ServiceAccountAuth {
  constructor(serviceRoleKey, serviceAccountEmail, serviceAccountPassword) {
    this.supabase = createClient(
      process.env.EXPO_PUBLIC_SUPABASE_URL,
      serviceRoleKey
    );
    this.serviceAccountEmail = serviceAccountEmail;
    this.serviceAccountPassword = serviceAccountPassword;
  }

  async authenticate() {
    try {
      const { data, error } = await this.supabase.auth.signInWithPassword({
        email: this.serviceAccountEmail,
        password: this.serviceAccountPassword
      });
      
      if (error) throw error;
      return data.session;
    } catch (error) {
      console.error('Service account authentication failed:', error);
      throw error;
    }
  }

  async getServiceAccountSession() {
    return await this.authenticate();
  }
}

module.exports = { ServiceAccountAuth };
`;

  const authPath = path.join(__dirname, '..', 'lib', 'auth', 'service-account-auth.js');
  
  try {
    // Create lib/auth directory if it doesn't exist
    const authDir = path.dirname(authPath);
    if (!fs.existsSync(authDir)) {
      fs.mkdirSync(authDir, { recursive: true });
    }
    
    fs.writeFileSync(authPath, serviceAccountAuth);
    console.log('‚úÖ Created service account authentication');
  } catch (error) {
    console.error('‚ùå Failed to create service account authentication:', error.message);
    return false;
  }
  
  return true;
}

function createNonInteractiveScripts() {
  console.log('ü§ñ Creating non-interactive scripts...\n');
  
  // Non-interactive database setup
  const nonInteractiveSetup = `#!/usr/bin/env node

/**
 * Non-Interactive Database Setup
 * This script sets up the database without requiring user input
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing required environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupDatabaseNonInteractive() {
  console.log('üöÄ Starting non-interactive database setup...');
  
  try {
    // Read and execute SQL schema
    const fs = require('fs');
    const path = require('path');
    const schemaPath = path.join(__dirname, '..', 'DOCS', 'database-schema.sql');
    const schemaSQL = fs.readFileSync(schemaPath, 'utf8');
    
    const statements = schemaSQL
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
    
    console.log(\`üìä Executing \${statements.length} SQL statements...\`);
    
    for (const statement of statements) {
      try {
        await supabase.rpc('exec_sql', { sql: statement });
        console.log('‚úÖ Statement executed successfully');
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log('‚ö†Ô∏è Statement skipped (already exists)');
        } else {
          console.error('‚ùå Statement failed:', error.message);
        }
      }
    }
    
    console.log('üéâ Database setup completed successfully!');
    
  } catch (error) {
    console.error('üí• Database setup failed:', error.message);
    process.exit(1);
  }
}

// Run the setup
setupDatabaseNonInteractive();
`;

  const nonInteractivePath = path.join(__dirname, 'setup-database-non-interactive.js');
  
  try {
    fs.writeFileSync(nonInteractivePath, nonInteractiveSetup);
    console.log('‚úÖ Created non-interactive database setup script');
  } catch (error) {
    console.error('‚ùå Failed to create non-interactive script:', error.message);
    return false;
  }
  
  return true;
}

async function main() {
  console.log('ü§ñ Automated Environment Setup for JamStockAnalytics');
  console.log('==================================================\n');
  
  try {
    const results = [
      createEnvFile(),
      createBuildScripts(),
      createCIConfig(),
      createAlternativeAuth(),
      createNonInteractiveScripts()
    ];
    
    const successCount = results.filter(Boolean).length;
    const totalCount = results.length;
    
    console.log('\nüìä Setup Summary:');
    console.log(\`   ‚úÖ Successful: \${successCount}\`);
    console.log(\`   ‚ùå Failed: \${totalCount - successCount}\`);
    
    if (successCount === totalCount) {
      console.log('\nüéâ Automated setup completed successfully!');
      console.log('\nüìã Next steps:');
      console.log('   1. Configure your environment variables in .env');
      console.log('   2. Set up your CI/CD secrets');
      console.log('   3. Run: npm run build:ci');
    } else {
      console.log('\n‚ö†Ô∏è Setup completed with some errors.');
      console.log('   Please review the errors above and fix any issues.');
    }
    
  } catch (error) {
    console.error('\nüí• Fatal error during setup:', error.message);
    process.exit(1);
  }
}

// Run the setup
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { 
  createEnvFile, 
  createBuildScripts, 
  createCIConfig, 
  createAlternativeAuth, 
  createNonInteractiveScripts 
};
